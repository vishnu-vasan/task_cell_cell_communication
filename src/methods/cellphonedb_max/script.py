import anndata as ad
import liana as li

def aggregate_method_scores(adata, how):
    merge_keys = list(adata.uns["merge_keys"])
    return (
        adata.uns["ccc_pred"]
        .groupby(merge_keys)
        .agg(score=("score", how))
        .reset_index()
    )

# Helper function to filter according to permutation p-values
def _p_filt(x, y):
    if x <= 0.05:
        return y
    else:
        return 0

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'dataset': r'resources/allen_brain_atlas/dataset.h5ad',
  'prediction': r'resources_test/cell_cell_communication_source_target/allen_brain_atlas/dataset.h5ad',
  'test': r'false'.lower() == 'true'
}
meta = {
  'name': r'cellphonedb_max',
  'functionality_name': r'cellphonedb_max',
  'resources_dir': r'/private/tmp/viash_inject_cellphonedb_max18225262420992332366',
  'executable': r'/private/tmp/viash_inject_cellphonedb_max18225262420992332366/cellphonedb_max',
  'config': r'/private/tmp/viash_inject_cellphonedb_max18225262420992332366/.config.vsh.yaml',
  'temp_dir': r'/var/folders/k5/pmf0cvdn4hxcv4bf37jgykmh0000gn/T/',
  'cpus': int(r'123'),
  'memory_b': int(r'123'),
  'memory_kb': int(r'123'),
  'memory_mb': int(r'123'),
  'memory_gb': int(r'123'),
  'memory_tb': int(r'123'),
  'memory_pb': int(r'123'),
  'memory_kib': int(r'123'),
  'memory_mib': int(r'123'),
  'memory_gib': int(r'123'),
  'memory_tib': int(r'123'),
  'memory_pib': int(r'123')
}
dep = {
  
}

## VIASH END

print('Reading input files', flush=True)
adata = ad.read_h5ad(par['dataset'])

cellphonedb_results = li.method.CellPhoneDB().__call__(
        adata,
        groupby="label",  # Adjust as needed
        resource_name=adata.uns['target organism'],
        expr_prop=0.1,
        min_cells=5,
        return_all_lrs=False,
        key_added="ccc_pred",
        n_perms=1000 if not par['test'] else 2,
    )
    
# Apply the filtering function to the DataFrame
adata.uns["ccc_pred"]["score"] = cellphonedb_results.apply(lambda row: _p_filt(row["p_value"], row["lr.mean"]), axis=1)
    
# Aggregate scores
adata.uns["ccc_pred"] = aggregate_method_scores(adata, how="max")
    
print("Write prediction AnnData to file", flush=True)
# prediction = ad.AnnData(
#   obs={
#     'ccc_pred': obs_ccc_pred
#   },
#   uns={
#     'dataset_id': dataset.uns['dataset_id'],
#     'normalization_id': dataset.uns['normalization_id'],
#     'method_id': meta['name']
#   }
# )
adata.write_h5ad(par['prediction'], compression='gzip')
